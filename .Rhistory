colnames(autism[bin_vars])
summary(autism[bin_vars])
str(autism[bin_vars])
#there are no missing values among these columns
autism[bin_vars] <- lapply(autism[bin_vars] , factor)
#some values that were characters were converted to numeric
#there are two missing observations in age that are represented by "?"
autism$age[autism$age == "?"] #they were 2 handled when converted into numeric
autism$age = as.numeric(autism$age)
summary(autism$age)
#NAs will be handled after convertinng and vizualizng other variables
library(dplyr)
count(autism, ethnicity) #There are 2 variables called "others" and 95 "?"
autism['others' == autism$ethnicity,'ethnicity'] =  "Others"#the obs name was fixed
autism['?' == autism$ethnicity,'ethnicity'] = NA
count(autism, gender)
autism$gender = as.factor(autism$gender)
#Jaundice
count(autism, jundice)
autism$jundice = as.factor(autism$jundice)
count(autism, country_of_residence)
#Converted into factors to use as part of predicttions, since
#diseases and conditions are affected by the enviroment
autism$country_of_residence = as.factor(autism$country_of_residence)
#converted to factor
count(autism, used_app_before) #count function used to check for NAs or NAs like ("?")
autism$used_app_before = as.factor(autism$used_app_before)
boxplot(autism$result)
count(autism, age_cat)
#factor again
#this is the class
autism$`Class/ASD` = as.factor(autism$`Class/ASD`)
count(autism, relation)
autism$relation[autism$relation == "?"] = NA
autism$relation = as.factor(autism$relation)
count(autism, austim) #this is family PDD
autism$austim = as.factor(autism$austim)
levels <- levels(autism$ethnicity)
levels
autism$ethnicity
# Get levels and add "Unknown"
levels <- levels(autism$relation)
levels[length(levels) + 1] <- "Unknown"
autism$relation <- factor(autism$relation, levels = levels)
autism$relation[is.na(autism$relation)] <- "Unknown"
count(autism, relation)
str(autism$relation)
levels(autism$relation)
levels(autism$ethnicity)
str(autism$ethnicity)
autism$ethnicity = as.factor(autism$ethnicity)
levels(autism$ethnicity)
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
autism = read_excel("AutismData.xlsx")
autism_original = autism
#We observe the variables to get an overview
dim(autism)
summary(autism)
str(autism)
# Type conversion
#get questions 1 to 10 and convert to binary
bin_vars = grep("A[0-9]+_Score", colnames(autism))
#these are the columns that are going to be changed
colnames(autism[bin_vars])
summary(autism[bin_vars])
str(autism[bin_vars])
#there are no missing values among these columns
autism[bin_vars] <- lapply(autism[bin_vars] , factor)
#some values that were characters were converted to numeric
#there are two missing observations in age that are represented by "?"
autism$age[autism$age == "?"] #they were 2 handled when converted into numeric
autism$age = as.numeric(autism$age)
summary(autism$age)
#NAs will be handled after convertinng and vizualizng other variables
library(dplyr)
count(autism, ethnicity) #There are 2 variables called "others" and 95 "?"
autism['others' == autism$ethnicity,'ethnicity'] =  "Others"#the obs name was fixed
autism['?' == autism$ethnicity,'ethnicity'] = NA
count(autism, gender)
autism$gender = as.factor(autism$gender)
#Jaundice
count(autism, jundice)
autism$jundice = as.factor(autism$jundice)
count(autism, country_of_residence)
#Converted into factors to use as part of predicttions, since
#diseases and conditions are affected by the enviroment
autism$country_of_residence = as.factor(autism$country_of_residence)
#converted to factor
count(autism, used_app_before) #count function used to check for NAs or NAs like ("?")
autism$used_app_before = as.factor(autism$used_app_before)
boxplot(autism$result)
count(autism, age_cat)
#factor again
#this is the class
autism$`Class/ASD` = as.factor(autism$`Class/ASD`)
count(autism, relation)
autism$relation[autism$relation == "?"] = NA
autism$relation = as.factor(autism$relation)
count(autism, austim) #this is family PDD
autism$austim = as.factor(autism$austim)
autism$ethnicity = as.factor(autism$ethnicity)
#count the NAs
sum(is.na(autism))
#returns columns that has missing values
sapply(autism, function(x){
sum(is.na(x))
})
#Most of the missing values are in the relation column
#because they are a lot of values, almost a 7th and could highly
plot(autism[is.na(autism$relation),'Class/ASD'])
#we observe that missing values of individuals that have autism are higher proportion
#we decide to put "Unknown" in places where we have NAs in relation column and check if it affects predictions
# Get levels and add "Unknown"
levels <- levels(autism$relation)
levels[length(levels) + 1] <- "Unknown"
autism$relation <- factor(autism$relation, levels = levels)
autism$relation[is.na(autism$relation)] <- "Unknown"
count(autism, relation)
#There were missing values at age:
sum(is.na(autism$age))
autism[is.na(autism$age),]
# will replace it with the median of the ages, since the screeing method type was the same for all variables
#and there is an outlier that is increasing the mean a lot
autism$age[is.na(autism$age)] = median(autism$age)
sapply(autism, function(x){
sum(is.na(x))
})
#lastly we will handle the ethnicity column
autism[is.na(autism$ethnicity),]
#apparently columns that have missing values in ethnicity also have missing values in relation
#often the ethnicity can be determined from the country of residence e.g: White people from some european country, but because the population distribution tends to be a lot more complex,
#i've decided to change missing values for just "Unknown"
ethno_res = autism %>% group_by(country_of_residence) %>% count(ethnicity)
#get indices of misisng values
levels <- levels(autism$ethnicity)
levels[length(levels) + 1] <- "Unknown"
autism$ethnicity <- factor(autism$ethnicity, levels = levels)
autism$ethnicity[is.na(autism$ethnicity)] <- "Unknown"
count(autism, ethnicity)
sum(is.na(autism))
#finally, we will handle the missing values in age
missing_ages = which(is.na(autism$age))
autism[missing_ages,]
#I've decided to replace the missing ages with some value
#but first I would like to know if age is a significant predictor for the class
#we previously observed an outlier, so wr are excluding it
age.glm = glm(`Class/ASD`~age, data = autism[-max(autism$age, na.rm = TRUE),], family = binomial)
summary(age.glm)
#the p value for the age is not significant, so I will replace age with with the median
age_noNA = autism$age
age_noNA[missing_ages] = median(age_noNA, na.rm = TRUE)
sum(is.na(age_noNA))
autism$age = age_noNA
#all mising values were handled
sum(is.na(autism))
#get all numerical variables
numeric_cols = sapply(autism, is.numeric)
autism[,numeric_cols]
boxplot(autism[,is.numeric(autism)])
boxplot(is.numeric(autism))
boxplot(autism[,numeric_cols])
hist(age)
hist(autism$age)
boxplot(autism[,numeric_cols])
which((autism$age))
which((autism$age) == autism$age)
which((autism$age) == autism$age))
which(max(autism$age) == autism$age)
autism$age[which(max(autism$age) == autism$age)] = median(autism$age)
boxplot(autism$result)
boxplot(autism$age)
boxplot(autism$result)
boxplot(autism$age)
boxplot(autism$result)
boxplot(autism$age)
boxplot(autism$age)
boxplot(autism$age)
boxplot(autism$age)$out
mean(autism$age) + 3*sd(autism$age)
autism = autism[,-("age_cat")]
autism = autism[,-c("age_cat")]
autism = autism[,-which(colnames(autism) == "age_cat")]
str(autism)
autism$age < 18
sum(autism$age < 18)
autism$age[autism$age < 18]
install.packages(tree)
install.packages("tree")
tree.attempt = tree(`Class/ASD`~., data = autism)
library(tree)
tree.attempt = tree(`Class/ASD`~., data = autism)
str(autism)
as.numeric(autism$country_of_residence)
country_id = as.numeric(autism$country_of_residence)
autism_update = autism %>% mutate(country_id = country_id)
View(autism_update)
tree.attempt = tree(`Class/ASD`~.-country_of_residence, data = autism_update)
summary(tree.attempt)
tree.attempt = tree(`Class/ASD`~.-country_of_residence, data = autism_update[, which(colnames(autism_update) == "country_of_residence")])
autism_update[, which(colnames(autism_update) == "country_of_residence")]
tree.attempt = tree(`Class/ASD`~.-country_of_residence, data = autism_update[, -which(colnames(autism_update) == "country_of_residence")])
tree.attempt = tree(`Class/ASD`~., data = autism_update[, -which(colnames(autism_update) == "country_of_residence")])
summary(tree.attempt)
summary(tree.attempt)
tree.attempt = tree(`Class/ASD`~.-country_of_residence, data = autism_update)
summary(tree.attempt)
tree.attempt = tree(`Class/ASD`~.-country_of_residence-result, data = autism_update)
summary(tree.attempt)
cor(autism)
cor(autism[,is.numeric(autism)])
library(ggplot2)
library(ggplot2)
ggplot(autism, aes(`Class/ASD`, results)) +
geom_bar(stat = "identity") +
labs(y = "Percentage correct", x = "Categorical variable")
library(ggplot2)
ggplot(autism, aes(`Class/ASD`, result)) +
geom_bar(stat = "identity") +
labs(y = "Percentage correct", x = "Categorical variable")
library(ggplot2)
ggplot(autism, aes(`Class/ASD`, result)) +
geom_bar(stat = "identity") +
labs(y = "Screening Score", x = "ASD")
plot(tree.attempt)
?tree.plot
install.packages("rpart")
library(rpart)
plot(tree.attempt, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(tree.attempt, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(tree.attempt, use.n=TRUE, all=TRUE, cex=.8)
plot(tree.attempt,
main="Classification Tree for Kyphosis")
text(tree.attempt, use.n=TRUE, all=TRUE, cex=.8)
plot(tree.attempt,
main="Classification Tree for Kyphosis")
text(tree.attempt, all=TRUE, cex=.8)
library(rpart)
plot(tree.attempt,
main="Classification Tree for ASD")
text(tree.attempt, all=TRUE, cex=.8)
scatterplot(autism$`Class/ASD`, autism$result)
plot(autism$`Class/ASD`, autism$result)
autism %>% group_by(`Class/ASD`) %>% count(result)
#we observe that all variables above 6 correspond to ASD and below, do not have ASD
autism %>% group_by(result) %>% count(`Class/ASD`)
autism %>% group_by(result, `Class/ASD`) %>% count(`Class/ASD`)
result.vs.class = glm(`Class/ASD`~result, data = autism, family = binomial)
result.vs.class = glm(`Class/ASD`~result, data = autism_update, family = binomial)
summary(result.vs.class)
result.vs.class = glm(`Class/ASD`~result, data = autism, family = binomial)
summary(result.vs.class)
result.vs.class = glm(result~`Class/ASD`, data = autism, family = binomial)
result.vs.class = glm(result~`Class/ASD`, data = autism)
summary(result.vs.class)
summary(tree.attempt)
install.packages("e1071")
library(e1071)
tree.attempt
?sample
train=sample(1:nrow(autism))
train
train=sample(1:nrow(autism), 200)
train=sample(1:nrow(autism))
sample(1:nrow(autism), 200)
#Separate Data into Test and Train set
set.seed(1) #0.8 was not chosen with any criteria
shuffle =sample(nrow(autism))
autism = autism[shuffle,]
split = round(nrow(autism) * .8)
train = autism[1:split,]
test = autism[(split+1):nrow(autism),]
View(test)
#Separate Data into Test and Train set
set.seed(1) #0.8 was not chosen with any criteria
shuffle =sample(nrow(autism_update))
autism_update = autism_update[shuffle,]
split = round(nrow(autism_update) * .8)
train = autism_update[1:split,]
test = autism_update[(split+1):nrow(autism_update),]
library(caret)
?confusionMatrix
library(caret)
#Separate Data into Test and Train set
set.seed(1) #0.8 was not chosen with any criteria
shuffle =sample(nrow(autism_update))
autism_update = autism_update[shuffle,]
split = round(nrow(autism_update) * .8)
train = autism_update[1:split,]
test = autism_update[(split+1):nrow(autism_update),]
tree.validation = tree(`Class/ASD`~.-country_of_residence-result, data = train)
tree.pred=predict(tree.validation ,test,type="class")
confusionMatrix(tree.pred, test$`Class/ASD`)
mean(tree.pred == test$`Class/ASD`)
summary(tree.validation)
library(caret)
#Separate Data into Test and Train set
set.seed(1) #0.8 was not chosen with any criteria
shuffle =sample(nrow(autism_update))
autism_update = autism_update[shuffle,]
split = round(nrow(autism_update) * .8)
train = autism_update[1:split,]
test = autism_update[(split+1):nrow(autism_update),]
tree.validation = tree(`Class/ASD`~.-country_of_residence-result, data = train)
tree.pred=predict(tree.validation ,test,type="class")
confusionMatrix(tree.pred, test$`Class/ASD`)
mean(tree.pred == test$`Class/ASD`)
summary(tree.validation)
plot(tree.validation,
main="Classification Tree for ASD")
text(tree.attempt, all=TRUE, cex=.8)
summary(tree.attempt)
summary(tree.validation)
set.seed(2)
tree.cv =cv.tree(tree.validation ,FUN=prune.misclass)
names(tree.cv)
set.seed(2)
tree.cv =cv.tree(tree.validation ,FUN=prune.misclass)
names(tree.cv)
tree.cv
set.seed(2)
tree.cv =cv.tree(tree.validation ,FUN=prune.misclass)
names(tree.cv)
tree.cv
#Tree with the lowest error rate is the one with 15 terminal nodes
par(mfrow=c(1,2))
plot(tree.cv$size ,tree.cv$dev ,type="b")
plot(tree.cv$k ,tree.cv$dev ,type="b")
?prune.misclass
tree.prune =prune.misclass(tree.validation ,best=15)
plot(tree.prune)
text(prune.carseats ,pretty =0)
tree.prune =prune.misclass(tree.validation ,best=15)
plot(tree.prune)
text(tree.prune ,pretty =0)
summary(tree.prune)
tree.prune.pred = predict(tree.prune, test, type = "class")
confusionMatrix(tree.prune.pred, test$`Class/ASD`)
tree.prune =prune.misclass(tree.validation ,best=12)
plot(tree.prune)
text(tree.prune ,pretty =0)
summary(tree.prune)
tree.prune.pred = predict(tree.prune, test, type = "class")
confusionMatrix(tree.prune.pred, test$`Class/ASD`)
tree.prune =prune.misclass(tree.validation ,best=12, k = 2.0)
plot(tree.prune)
text(tree.prune ,pretty =0)
summary(tree.prune)
tree.prune.pred = predict(tree.prune, test, type = "class")
confusionMatrix(tree.prune.pred, test$`Class/ASD`)
install.packages("randomForest")
library(randomForest)
library(randomForest)
tree.bag = randomForest(Class/`Class/ASD`~.-result-country_of_residence, data=train, mtry=ncol(autism_update), importance = TRUE)
library(randomForest)
tree.bag = randomForest(`Class/ASD`~.-result-country_of_residence, data=train, mtry=ncol(autism_update), importance = TRUE)
tree.bag
library(randomForest)
tree.bag = randomForest(`Class/ASD`~.-result-country_of_residence, data=train, mtry=ncol(autism_update), importance = TRUE)
tree.bag
yhat.bag = predict(tree.bag, newdata = test)
plot(yhat.bag, test) + abline(0,1)
library(randomForest)
tree.bag = randomForest(`Class/ASD`~.-result-country_of_residence, data=train, mtry=ncol(autism_update), importance = TRUE)
tree.bag
yhat.bag = predict(tree.bag, newdata = test)
plot(yhat.bag, test)
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
#We scale them, because not all variables use the same units
svm.linear=svm(Class/`Class/ASD`~., data=train , kernel ="linear", cost=10, scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
svm.linear=svm(Class/`Class/ASD`~.-result-country_of_residence, data=train , kernel ="linear", cost=10, scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
svm.linear=svm(`Class/ASD`~.-result-country_of_residence, data=train , kernel ="linear", cost=10, scale=TRUE)
plot(svm.linear, train)
svm.linear=svm(`Class/ASD`~.-result-country_of_residence, data=train , kernel ="linear", cost=10, scale=TRUE)
plot(svm.linear, train)
plot(svm.linear, train, formula = `Class/ASD`~.-result-country_of_residence)
library(e1071)
#We scale them, because not all variables use the same units
svm.linear=svm(`Class/ASD`~.-country_of_residence-result, data=train , kernel ="linear", cost=10, scale=TRUE)
plot(svm.linear, train)
#We scale them, because not all variables use the same units
svm.linear=svm(`Class/ASD`~.-country_of_residence-result, data=train , kernel ="linear", cost=10, scale=FALSE)
plot(svm.linear, train)
library(e1071)
#We scale them, because not all variables use the same units
svm.linear=svm(`Class/ASD`~.-country_of_residence-result, data=train , type= "C-classification",kernel ="linear", cost=10, scale=FALSE)
plot(svm.linear, train)
svm.linear
svm.linear=svm(`Class/ASD`~.-country_of_residence-result, data=train , type= "C-classification",kernel ="linear", cost=10, scale=TRUE)
svm.linear
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~.-country_of_residence-result, data=train , type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~.-country_of_residence-result, data=train , type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
svm.linear.pred = predict(svm.linear, test)
mean(svm.linear.pred == test$`Class/ASD`)
plot(svm.linear)
plot(svm.linear, data=train)
plot(svm.linear, data=train, formula = `Class/ASD`~.-country_of_residence-result)
?plot.svm
plot(svm.linear, data=train, formula = `Class/ASD`~.-country_of_residence-result, scale=TRUE)
plot(svm.linear, data=train[,c("relation", "country_of_residence")], formula = `Class/ASD`~., scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~., data=train[,-c("relation", "country_of_residence")] , type= "C-classification",kernel ="linear", scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~., data=train[,-which(colnames(train) == c("relation", "country_of_residence"))], type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
svm.linear.pred = predict(svm.linear, test)
mean(svm.linear.pred == test$`Class/ASD`)
plot(svm.linear, data=train[,-c("relation", "country_of_residence")], formula = `Class/ASD`~., scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~., data=train[,-which(colnames(train) == c("relation", "country_of_residence"))], type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
svm.linear.pred = predict(svm.linear, test)
mean(svm.linear.pred == test$`Class/ASD`)
plot(svm.linear, data=train[,-which(colnames(train) == c("relation", "country_of_residence"))], formula = `Class/ASD`~., scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~., data=train[,c("relation", "country_of_residence")], type= "C-classification",kernel ="linear", scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~., data=train[,c("relation", "country_of_residence", "Class/ASD")], type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
svm.linear.pred = predict(svm.linear, test)
mean(svm.linear.pred == test$`Class/ASD`)
plot(svm.linear, data=train[,c("relation", "country_of_residence", "Class/ASD")], formula = `Class/ASD`~., scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~., data=train, type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
svm.linear.pred = predict(svm.linear, test)
mean(svm.linear.pred == test$`Class/ASD`)
plot(svm.linear, data=train, formula = `Class/ASD`~., scale=TRUE)
svm.linear=svm(`Class/ASD`~-result-country_of_residence, data=train, type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear=svm(`Class/ASD`~-result-country_of_residence, data=train, type= "C-classification",kernel ="linear", scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~-result-country_of_residence, data=train, type= "C-classification",kernel ="linear", scale=TRUE)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~.-result-country_of_residence, data=train, type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
p = ggplot(data=train, aes(x = x1, y = x2, ))
svm.linear=svm(`Class/ASD`~.-result-country_of_residence, data=train, type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
library(ggplot2)
p = ggplot(data=train, aes(x = x1, y = x2)) +
geom_point() +
scale_color_manual(values = c("red", "blue"))
p
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~.-result-country_of_residence-country_id, data=train, type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
plot(svm.linear, data = train, `Class/ASD`~.-result-country_of_residence-country_id)
View(train)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~.-result-country_of_residence-country_id-ethnicity, data=train, type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
plot(svm.linear, data = train, `Class/ASD`~.-result-country_of_residence-country_id-ethnicity)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~ethnicity, data=train, type= "C-classification",kernel ="linear", scale=TRUE)
svm.linear
plot(svm.linear, data = train, `Class/ASD`~ethnicity)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~ethnicity, data=train, kernel ="linear", scale=TRUE)
svm.linear
plot(svm.linear, data = train, `Class/ASD`~ethnicity)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~age, data=train, kernel ="linear", scale=TRUE)
svm.linear
plot(svm.linear, data = train, `Class/ASD`~age)
library(e1071)
#We scale them, because not all variables use the same units
#We are setting the default cost for learning purposes
svm.linear=svm(`Class/ASD`~age, data=train, kernel ="radial", scale=TRUE)
svm.linear
plot(svm.linear, data = train, `Class/ASD`~age)
